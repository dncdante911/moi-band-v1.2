<?php
/**
 * –§–∞–π–ª: api/player/queue.php
 * API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ —Ç—Ä–µ–∫–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø v2.1
 * 
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
 * - ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç duration (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ –∏–∑ –ë–î)
 * - ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞–º
 * - ‚úÖ –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–∞—Ö
 */

header('Content-Type: application/json');

require_once '../../include_config/config.php';
require_once '../../include_config/db_connect.php';

$albumId = intval($_GET['album_id'] ?? 0);
$playlistId = intval($_GET['playlist_id'] ?? 0);

try {
    $tracks = [];
    
    // === –ü–û–õ–£–ß–ò–¢–¨ –¢–†–ï–ö–ò –ò–ó –ê–õ–¨–ë–û–ú–ê ===
    if ($albumId) {
        $stmt = $pdo->prepare("
            SELECT 
                t.id,
                t.title,
                t.description,
                t.albumId,
                t.coverImagePath,
                t.fullAudioPath,
                t.videoPath,
                t.lyricsPath,
                t.duration,
                a.title as albumTitle
            FROM Track t
            LEFT JOIN Albums a ON t.albumId = a.id
            WHERE t.albumId = ?
            ORDER BY t.id ASC
        ");
        $stmt->execute([$albumId]);
        $tracks = $stmt->fetchAll();
        
        console_log("üìÄ –ê–ª—å–±–æ–º #$albumId: " . count($tracks) . " —Ç—Ä–µ–∫–æ–≤");
    } 
    // === –ü–û–õ–£–ß–ò–¢–¨ –¢–†–ï–ö–ò –ò–ó –ü–õ–ï–ô–õ–ò–°–¢–ê ===
    else if ($playlistId) {
        $stmt = $pdo->prepare("
            SELECT 
                t.id,
                t.title,
                t.description,
                t.albumId,
                t.coverImagePath,
                t.fullAudioPath,
                t.videoPath,
                t.lyricsPath,
                t.duration,
                a.title as albumTitle
            FROM Track t
            LEFT JOIN Albums a ON t.albumId = a.id
            INNER JOIN PlaylistTracks pt ON t.id = pt.track_id
            WHERE pt.playlist_id = ?
            ORDER BY pt.position ASC
        ");
        $stmt->execute([$playlistId]);
        $tracks = $stmt->fetchAll();
        
        console_log("üìã –ü–ª–µ–π–ª–∏—Å—Ç #$playlistId: " . count($tracks) . " —Ç—Ä–µ–∫–æ–≤");
    }
    
    // === –û–ë–†–ê–ë–û–¢–ê–¢–¨ –ò –í–ï–†–ù–£–¢–¨ –¢–†–ï–ö–ò ===
    echo json_encode([
        'success' => true,
        'count' => count($tracks),
        'tracks' => array_map(function($track) {
            return [
                'id' => (int)$track['id'],
                'title' => htmlspecialchars($track['title']),
                'description' => htmlspecialchars($track['description'] ?? ''),
                'albumTitle' => htmlspecialchars($track['albumTitle'] ?? '–ê–ª—å–±–æ–º'),
                'coverImagePath' => $track['coverImagePath'],
                'fullAudioPath' => $track['fullAudioPath'],
                'videoPath' => $track['videoPath'],
                'lyricsPath' => $track['lyricsPath'],
                'duration' => (int)($track['duration'] ?? 0)  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º duration
            ];
        }, $tracks)
    ]);
    
} catch (Exception $e) {
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'error' => $e->getMessage()
    ]);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function console_log($msg) {
    if (DEBUG_MODE) {
        error_log($msg);
    }
}