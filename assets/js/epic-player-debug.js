/**
 * –§–∞–π–ª: assets/js/epic-player-debug.js
 * –û–¢–õ–ê–î–û–ß–ù–ê–Ø –í–ï–†–°–ò–Ø –° –†–ê–°–®–ò–†–ï–ù–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú
 * 
 * –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –í HTML –í–ú–ï–°–¢–û epic-player.js:
 * <script src="/assets/js/epic-player-debug.js"></script>
 */

class EpicPlayerDebug {
    constructor(containerId = 'epic-player') {
        this.containerId = containerId;
        this.container = null;
        this.queue = [];
        this.currentIndex = 0;
        this.isPlaying = false;
        this.currentMode = 'audio';
        this.repeatMode = 'none';
        this.isShuffle = false;
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞
        console.log('%cüé∏ EPIC PLAYER v4.1 DEBUG MODE', 'font-size: 16px; color: #FFD700; font-weight: bold;');
        console.log('Device:', {
            userAgent: navigator.userAgent.slice(0, 60),
            width: window.innerWidth,
            height: window.innerHeight,
            language: navigator.language
        });
        
        this.init();
    }
    
    init() {
        console.log('üìç [INIT] Starting initialization...');
        
        // 1. –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.container = document.getElementById(this.containerId);
        if (!this.container) {
            console.error('%c‚ùå [CRITICAL] Player container NOT found!', 'color: red; font-weight: bold;');
            console.error('Looking for ID:', this.containerId);
            return;
        }
        console.log('‚úÖ [INIT] Container found:', this.container);
        
        // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.checkElements();
        
        // 3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª–∏
        this.setupEventListeners();
        console.log('‚úÖ [INIT] Event listeners set up');
        
        // 4. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–ª—å–±–æ–º
        this.loadAlbumFromURL();
        
        console.log('‚úÖ [INIT] Initialization complete!');
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    checkElements() {
        console.group('üîç [ELEMENTS CHECK]');
        
        const elements = {
            audio: document.getElementById('audio-player'),
            video: document.getElementById('video-player'),
            display: this.container.querySelector('.player-display'),
            info: this.container.querySelector('.player-info'),
            title: this.container.querySelector('.track-title'),
            artist: this.container.querySelector('.track-artist'),
            album: this.container.querySelector('.track-album'),
            progress: this.container.querySelector('.progress-container'),
            progressBar: this.container.querySelector('.progress-bar'),
            progressFill: this.container.querySelector('.progress-fill'),
            progressHandle: this.container.querySelector('.progress-handle'),
            controls: this.container.querySelector('.player-controls'),
            playBtn: this.container.querySelector('.play-btn'),
            modes: this.container.querySelector('.player-modes'),
            modeBtns: this.container.querySelectorAll('.mode-btn'),
            queueContainer: this.container.querySelector('.queue-container'),
            queueList: this.container.querySelector('.queue-list'),
            lyricsContainer: this.container.querySelector('.lyrics-container'),
            lyricsText: this.container.querySelector('.lyrics-text')
        };
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
        Object.entries(elements).forEach(([key, el]) => {
            if (Array.isArray(el)) {
                console.log(`  ${key}: ${el.length} items`, el);
            } else {
                const status = el ? '‚úÖ' : '‚ùå';
                console.log(`  ${status} ${key}`, el);
            }
        });
        
        console.groupEnd();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const critical = ['audio', 'display', 'title', 'controls', 'modes'];
        const missing = critical.filter(key => !elements[key]);
        
        if (missing.length > 0) {
            console.error('%c‚ùå CRITICAL ELEMENTS MISSING: ' + missing.join(', '), 'color: red; font-weight: bold;');
        } else {
            console.log('%c‚úÖ All critical elements present!', 'color: green; font-weight: bold;');
        }
        
        return elements;
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        console.log('üìç [SETUP EVENTS]');
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const playBtn = this.container.querySelector('.play-btn');
        const prevBtn = this.container.querySelector('[data-action="prev"]');
        const nextBtn = this.container.querySelector('[data-action="next"]');
        
        if (!playBtn) {
            console.warn('‚ö†Ô∏è Play button not found!');
        } else {
            playBtn.addEventListener('click', () => {
                console.log('‚ñ∂Ô∏è [EVENT] Play button clicked');
                this.togglePlay();
            });
        }
        
        if (!prevBtn) {
            console.warn('‚ö†Ô∏è Prev button not found!');
        } else {
            prevBtn.addEventListener('click', () => {
                console.log('‚èÆÔ∏è [EVENT] Prev button clicked');
                this.prevTrack();
            });
        }
        
        if (!nextBtn) {
            console.warn('‚ö†Ô∏è Next button not found!');
        } else {
            nextBtn.addEventListener('click', () => {
                console.log('‚è≠Ô∏è [EVENT] Next button clicked');
                this.nextTrack();
            });
        }
        
        // –†–µ–∂–∏–º—ã
        const modeBtns = this.container.querySelectorAll('.mode-btn');
        console.log(`üìã Found ${modeBtns.length} mode buttons`);
        
        modeBtns.forEach((btn, index) => {
            btn.addEventListener('click', (e) => {
                const mode = e.target.dataset.mode;
                console.log(`üì∫ [EVENT] Mode button clicked: ${mode}`);
                this.switchMode(mode);
            });
        });
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        const progressBar = this.container.querySelector('.progress-bar');
        if (progressBar) {
            progressBar.addEventListener('click', (e) => {
                console.log('üéöÔ∏è [EVENT] Progress bar clicked');
                this.seekTo(e);
            });
        }
        
        // –ê—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç
        const audio = document.getElementById('audio-player');
        if (audio) {
            audio.addEventListener('timeupdate', () => this.updateProgress());
            audio.addEventListener('ended', () => {
                console.log('‚èπÔ∏è [EVENT] Audio ended');
                this.onTrackEnded();
            });
            audio.addEventListener('play', () => {
                console.log('‚ñ∂Ô∏è [EVENT] Audio playing');
                this.isPlaying = true;
                this.updatePlayButton();
            });
            audio.addEventListener('pause', () => {
                console.log('‚è∏Ô∏è [EVENT] Audio paused');
                this.isPlaying = false;
                this.updatePlayButton();
            });
            audio.addEventListener('error', (e) => {
                console.error('‚ùå [EVENT] Audio error:', e);
            });
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–ª—å–±–æ–º –∏–∑ URL
     */
    loadAlbumFromURL() {
        console.log('üìç [LOAD ALBUM]');
        
        const urlParams = new URLSearchParams(window.location.search);
        const albumId = urlParams.get('id');
        
        if (!albumId) {
            console.warn('‚ö†Ô∏è No album ID in URL');
            return;
        }
        
        console.log(`üîÑ Loading album ID: ${albumId}`);
        this.loadPlaylist(parseInt(albumId));
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç
     */
    async loadPlaylist(albumId) {
        console.group(`üéµ [LOAD PLAYLIST] Album #${albumId}`);
        
        try {
            const url = `/api/player/queue.php?album_id=${albumId}`;
            console.log(`üåê Fetching: ${url}`);
            
            const response = await fetch(url);
            console.log(`üìä Response status: ${response.status}`);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const data = await response.json();
            console.log('üì¶ API Response:', data);
            
            if (!data.success) {
                throw new Error(data.error || 'API error');
            }
            
            if (!data.tracks || data.tracks.length === 0) {
                console.warn('‚ö†Ô∏è Playlist is empty!');
                console.groupEnd();
                return;
            }
            
            this.queue = data.tracks;
            this.currentIndex = 0;
            
            console.log(`‚úÖ Loaded ${this.queue.length} tracks`);
            console.table(this.queue.map(t => ({
                id: t.id,
                title: t.title,
                duration: t.duration,
                audio: t.fullAudioPath ? '‚úÖ' : '‚ùå'
            })));
            
            this.renderQueue();
            this.loadTrack(0);
            
        } catch (error) {
            console.error('%c‚ùå [ERROR] Failed to load playlist:', 'color: red; font-weight: bold;');
            console.error(error);
        }
        
        console.groupEnd();
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫
     */
    loadTrack(index) {
        console.group(`üéµ [LOAD TRACK] Index #${index}`);
        
        if (index < 0 || index >= this.queue.length) {
            console.error(`‚ùå Invalid index: ${index}`);
            console.groupEnd();
            return;
        }
        
        this.currentIndex = index;
        const track = this.queue[index];
        
        console.log(`Track: ${track.title}`);
        console.log(`Duration: ${track.duration}s`);
        console.log(`Audio path: ${track.fullAudioPath}`);
        console.log(`Video path: ${track.videoPath || 'none'}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        this.updateTrackInfo(track);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
        if (track.fullAudioPath) {
            this.loadAudio(track);
        } else {
            console.error('‚ùå No audio path provided!');
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        this.updateQueueHighlight();
        
        console.groupEnd();
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ
     */
    loadAudio(track) {
        console.log('üîä [LOAD AUDIO]');
        
        const audio = document.getElementById('audio-player');
        if (!audio) {
            console.error('‚ùå Audio element not found!');
            return;
        }
        
        const audioPath = track.fullAudioPath.startsWith('/') 
            ? track.fullAudioPath 
            : '/' + track.fullAudioPath;
        
        console.log(`Path: ${audioPath}`);
        audio.src = audioPath;
        console.log('‚úÖ Audio loaded');
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—Ä–µ–∫–∞
     */
    updateTrackInfo(track) {
        console.log('üìù [UPDATE INFO]');
        
        const title = this.container.querySelector('.track-title');
        const artist = this.container.querySelector('.track-artist');
        const album = this.container.querySelector('.track-album');
        
        if (title) {
            title.textContent = track.title || 'Unknown';
            console.log(`Title: ${title.textContent}`);
        }
        
        if (artist) {
            artist.textContent = 'Master of Illusion';
        }
        
        if (album) {
            album.textContent = track.albumTitle || 'Album';
            console.log(`Album: ${album.textContent}`);
        }
        
        // –û–±–ª–æ–∂–∫–∞
        const cover = this.container.querySelector('.player-cover img');
        if (cover && track.coverImagePath) {
            const coverPath = track.coverImagePath.startsWith('/') 
                ? track.coverImagePath 
                : '/' + track.coverImagePath;
            cover.src = coverPath;
            console.log(`Cover: ${coverPath}`);
        }
    }
    
    /**
     * –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
     */
    renderQueue() {
        console.log('üìã [RENDER QUEUE]');
        
        const queueList = this.container.querySelector('.queue-list');
        if (!queueList) {
            console.warn('‚ö†Ô∏è Queue list not found!');
            return;
        }
        
        console.log(`Rendering ${this.queue.length} items...`);
        
        queueList.innerHTML = this.queue.map((track, index) => `
            <li class="queue-item" data-index="${index}">
                <span class="queue-number">${index + 1}</span>
                <div class="queue-info">
                    <div class="queue-track-name">${this.escapeHtml(track.title)}</div>
                    <div class="queue-track-album">${this.escapeHtml(track.albumTitle || '')}</div>
                </div>
                <span class="queue-duration">${this.formatTime(track.duration || 0)}</span>
            </li>
        `).join('');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
        queueList.querySelectorAll('.queue-item').forEach((item, index) => {
            item.addEventListener('click', () => {
                console.log(`üéµ Queue item clicked: ${index}`);
                this.playTrack(index);
            });
        });
        
        console.log('‚úÖ Queue rendered');
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
     */
    updateQueueHighlight() {
        const items = this.container.querySelectorAll('.queue-item');
        items.forEach((item, index) => {
            if (index === this.currentIndex) {
                item.classList.add('active');
            } else {
                item.classList.remove('active');
            }
        });
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
     */
    togglePlay() {
        console.log(`üéµ [TOGGLE PLAY] Current: ${this.isPlaying}`);
        
        const audio = document.getElementById('audio-player');
        if (!audio) {
            console.error('‚ùå Audio element not found!');
            return;
        }
        
        if (this.isPlaying) {
            audio.pause();
        } else {
            audio.play().catch(err => {
                console.error('‚ùå Play error:', err);
            });
        }
    }
    
    /**
     * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫
     */
    playTrack(index) {
        console.log(`‚ñ∂Ô∏è [PLAY TRACK] Index: ${index}`);
        this.loadTrack(index);
        const audio = document.getElementById('audio-player');
        if (audio) {
            audio.play().catch(err => console.error('‚ùå Play error:', err));
        }
    }
    
    /**
     * –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
     */
    nextTrack() {
        console.log(`‚è≠Ô∏è [NEXT TRACK]`);
        if (this.queue.length === 0) return;
        
        this.currentIndex++;
        if (this.currentIndex >= this.queue.length) {
            this.currentIndex = 0;
        }
        
        this.playTrack(this.currentIndex);
    }
    
    /**
     * –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫
     */
    prevTrack() {
        console.log(`‚èÆÔ∏è [PREV TRACK]`);
        if (this.queue.length === 0) return;
        
        this.currentIndex--;
        if (this.currentIndex < 0) {
            this.currentIndex = this.queue.length - 1;
        }
        
        this.playTrack(this.currentIndex);
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º
     */
    switchMode(mode) {
        console.log(`üì∫ [SWITCH MODE] ${mode}`);
        this.currentMode = mode;
        
        const display = this.container.querySelector('.player-display');
        const queue = this.container.querySelector('.queue-container');
        const lyrics = this.container.querySelector('.lyrics-container');
        
        // –°–∫—Ä—ã—Ç—å –≤—Å–µ
        [display, queue, lyrics].forEach(el => {
            if (el) el.style.display = 'none';
        });
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—ã–π
        switch(mode) {
            case 'audio':
            case 'video':
                if (display) display.style.display = 'block';
                break;
            case 'queue':
                if (queue) queue.style.display = 'block';
                break;
            case 'lyrics':
                if (lyrics) lyrics.style.display = 'block';
                break;
        }
    }
    
    /**
     * –ü–æ–∏—Å–∫ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
     */
    seekTo(e) {
        console.log('üéöÔ∏è [SEEK]');
        const progressBar = this.container.querySelector('.progress-bar');
        const audio = document.getElementById('audio-player');
        
        if (!progressBar || !audio || !audio.duration) return;
        
        const rect = progressBar.getBoundingClientRect();
        const percent = (e.clientX - rect.left) / rect.width;
        audio.currentTime = percent * audio.duration;
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
     */
    updateProgress() {
        const audio = document.getElementById('audio-player');
        if (!audio) return;
        
        const percent = audio.duration ? (audio.currentTime / audio.duration) * 100 : 0;
        const fill = this.container.querySelector('.progress-fill');
        const times = this.container.querySelectorAll('.time');
        
        if (fill) fill.style.width = percent + '%';
        if (times[0]) times[0].textContent = this.formatTime(audio.currentTime);
        if (times[1]) times[1].textContent = this.formatTime(audio.duration);
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É play
     */
    updatePlayButton() {
        const btn = this.container.querySelector('.play-btn');
        if (btn) {
            btn.textContent = this.isPlaying ? '‚è∏' : '‚ñ∂';
        }
    }
    
    /**
     * –¢—Ä–µ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω
     */
    onTrackEnded() {
        console.log('‚èπÔ∏è [TRACK ENDED]');
        this.nextTrack();
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
     */
    formatTime(seconds) {
        if (!seconds || isNaN(seconds)) return '0:00';
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins}:${secs.toString().padStart(2, '0')}`;
    }
    
    /**
     * Escape HTML
     */
    escapeHtml(text) {
        const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' };
        return String(text || '').replace(/[&<>"']/g, m => map[m]);
    }
}

// ============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ============================================

document.addEventListener('DOMContentLoaded', () => {
    console.log('%cüé∏ DOM LOADED - Initializing EpicPlayer...', 'font-size: 14px; color: #FFD700;');
    
    if (document.getElementById('epic-player')) {
        window.epicPlayer = new EpicPlayerDebug('epic-player');
        console.log('%c‚úÖ EPIC PLAYER READY!', 'font-size: 16px; color: green; font-weight: bold;');
    } else {
        console.error('%c‚ùå Epic player container not found in DOM!', 'color: red; font-weight: bold;');
    }
});

console.log('%c‚úÖ Epic Player Debug Script Loaded', 'font-size: 12px; color: #FFD700;');