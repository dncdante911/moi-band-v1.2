/**
 * –§–∞–π–ª: assets/js/epic-player.js
 * –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –ü–õ–ï–ï–†–ê –° –†–ê–ë–û–¢–ê–Æ–©–ò–ú –í–ò–î–ï–û
 * * ‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ Desktop –∏ Mobile
 * ‚úÖ –í–∏–¥–µ–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
 * ‚úÖ –ê—É–¥–∏–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
 * ‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
 * ‚úÖ –¢–µ–∫—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
 */

class EpicPlayer {
    constructor(containerId = 'epic-player') {
        this.container = document.getElementById(containerId);
        if (!this.container) {
            console.error('‚ùå Player container not found:', containerId);
            return;
        }
        
        this.queue = [];
        this.currentIndex = 0;
        this.isPlaying = false;
        this.currentMode = 'audio';
        this.repeatMode = 'none';
        this.isShuffle = false;
        
        console.log('üé∏ Epic Player v4.2 - Video Edition');
        this.init();
    }
    
    init() {
        this.setupEventListeners();
        this.loadAlbumFromURL();
    }
    
    setupEventListeners() {
        // === –û–°–ù–û–í–ù–´–ï –ö–ù–û–ü–ö–ò ===
        const playBtn = this.container?.querySelector('.play-btn');
        const prevBtn = this.container?.querySelector('[data-action="prev"]');
        const nextBtn = this.container?.querySelector('[data-action="next"]');
        const repeatBtn = this.container?.querySelector('[data-action="repeat"]');
        const shuffleBtn = this.container?.querySelector('[data-action="shuffle"]');
        
        if (playBtn) playBtn.addEventListener('click', () => this.togglePlay());
        if (prevBtn) prevBtn.addEventListener('click', () => this.prevTrack());
        if (nextBtn) nextBtn.addEventListener('click', () => this.nextTrack());
        if (repeatBtn) repeatBtn.addEventListener('click', () => this.toggleRepeat());
        if (shuffleBtn) shuffleBtn.addEventListener('click', () => this.toggleShuffle());
        
        // === –†–ï–ñ–ò–ú–´ ===
        const modeButtons = this.container?.querySelectorAll('.mode-btn');
        if (modeButtons) {
            modeButtons.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const mode = e.target.dataset.mode;
                    if (mode) this.switchMode(mode);
                });
            });
        }
        
        // === –ü–†–û–ì–†–ï–°–° –ë–ê–† ===
        const progressBar = this.container?.querySelector('.progress-bar');
        if (progressBar) {
            progressBar.addEventListener('click', (e) => this.seekTo(e));
        }
        
        // === –ê–£–î–ò–û ===
        const audio = this.container?.querySelector('audio');
        if (audio) {
            audio.addEventListener('timeupdate', () => this.updateProgress());
            audio.addEventListener('ended', () => this.onTrackEnded());
            audio.addEventListener('loadedmetadata', () => this.updateDuration());
            audio.addEventListener('play', () => {
                this.isPlaying = true;
                this.updatePlayButton();
            });
            audio.addEventListener('pause', () => {
                this.isPlaying = false;
                this.updatePlayButton();
            });
        }
        
        // === –í–ò–î–ï–û ===
        const video = this.container?.querySelector('video');
        if (video) {
            video.addEventListener('timeupdate', () => this.updateProgress());
            video.addEventListener('ended', () => this.onTrackEnded());
            video.addEventListener('loadedmetadata', () => this.updateDuration());
            video.addEventListener('play', () => {
                this.isPlaying = true;
                this.updatePlayButton();
            });
            video.addEventListener('pause', () => {
                this.isPlaying = false;
                this.updatePlayButton();
            });
        }
    }
    
    loadAlbumFromURL() {
        const urlParams = new URLSearchParams(window.location.search);
        const albumId = urlParams.get('id');
        
        // –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å —É–∂–µ –µ—Å—Ç—å, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–µ —Å–Ω–æ–≤–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (this.queue.length > 0) {
            console.log('üîÑ Queue already loaded. Skipping auto-load.');
            return;
        }

        if (albumId) {
            console.log('üìÄ Loading album:', albumId);
            this.loadPlaylist(parseInt(albumId));
        }
    }
    
    async loadPlaylist(albumId) {
        try {
            console.log('üîÑ Fetching queue...');
            const url = `/api/player/queue.php?album_id=${albumId}`;
            const response = await fetch(url);
            
            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            
            const data = await response.json();
            
            if (!data.success) throw new Error(data.error || 'Unknown error');
            if (!data.tracks || data.tracks.length === 0) {
                console.warn('‚ö†Ô∏è No tracks found');
                return;
            }
            
            this.queue = data.tracks;
            this.currentIndex = 0;
            
            console.log(`‚úÖ Loaded ${this.queue.length} tracks`);
            this.renderQueue();
            this.loadTrack(0);
            
        } catch (error) {
            console.error('‚ùå Error loading playlist:', error);
        }
    }
    
    loadTrack(index) {
        if (index < 0 || index >= this.queue.length) return;
        
        this.currentIndex = index;
        const track = this.queue[index];
        
        console.log(`üéµ Loading track: ${track.title}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        this.updateTrackInfo(track);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if (this.currentMode === 'video' && track.videoPath) {
            this.loadVideo(track);
        } else {
            this.loadAudio(track);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç
        this.loadLyrics(track.id);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
        this.updateQueueHighlight();
        
        // –î–û–ë–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–ª—å–±–æ–º–∞ (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
        this.updateAlbumTrackHighlight(track.id);
    }
    
    loadAudio(track) {
        const audio = this.container?.querySelector('audio');
        if (!audio || !track.fullAudioPath) return;
        
        const path = this.normalizePath(track.fullAudioPath);
        console.log('üîä Loading audio:', path);
        audio.src = path;
    }
    
    loadVideo(track) {
        const video = this.container?.querySelector('video');
        if (!video || !track.videoPath) {
            console.warn('‚ö†Ô∏è No video or video element');
            this.loadAudio(track);
            return;
        }
        
        const path = this.normalizePath(track.videoPath);
        console.log('üé¨ Loading video:', path);
        video.src = path;
    }
    
    async loadLyrics(trackId) {
        try {
            const response = await fetch(`/api/player/lyrics.php?track_id=${trackId}`);
            const data = await response.json();
            
            const lyricsText = this.container?.querySelector('.lyrics-text');
            if (!lyricsText) return;
            
            if (data.lyrics && data.lyrics.trim()) {
                lyricsText.textContent = data.lyrics;
            } else {
                lyricsText.innerHTML = '<div class="no-lyrics">üéµ –¢–µ–∫—Å—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω</div>';
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è Could not load lyrics');
        }
    }
    
    updateTrackInfo(track) {
        const title = this.container?.querySelector('.track-title');
        const artist = this.container?.querySelector('.track-artist');
        const album = this.container?.querySelector('.track-album');
        
        if (title) title.textContent = track.title || 'Unknown';
        if (artist) artist.textContent = 'Master of Illusion';
        if (album) album.textContent = track.albumTitle || 'Album';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É
        const cover = this.container?.querySelector('.player-cover img');
        if (cover && track.coverImagePath) {
            cover.src = this.normalizePath(track.coverImagePath);
        }
    }
    
    renderQueue() {
        const queueList = this.container?.querySelector('.queue-list');
        if (!queueList) return;
        
        // –î–û–ë–ê–í–õ–ï–ù data-track-id –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        queueList.innerHTML = this.queue.map((track, index) => `
            <li class="queue-item" data-index="${index}" data-track-id="${this.escapeHtml(track.id)}">
                <span class="queue-number">${index + 1}</span>
                <div class="queue-info">
                    <div class="queue-track-name">${this.escapeHtml(track.title)}</div>
                    <div class="queue-track-album">${this.escapeHtml(track.albumTitle || '')}</div>
                </div>
                <span class="queue-duration">${this.formatTime(track.duration || 0)}</span>
            </li>
        `).join('');
        
        queueList.querySelectorAll('.queue-item').forEach((item, index) => {
            item.addEventListener('click', () => this.playTrack(index));
        });
    }
    
    updateQueueHighlight() {
        const items = this.container?.querySelectorAll('.queue-item');
        if (items) {
            items.forEach((item, index) => {
                item.classList.toggle('active', index === this.currentIndex);
            });
        }
    }

    // –î–û–ë–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Ç—Ä–µ–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–ª—å–±–æ–º–∞
    updateAlbumTrackHighlight(currentTrackId) {
        const targetId = String(currentTrackId); 
        
        document.querySelectorAll('.track-playable').forEach(item => {
            const trackId = item.dataset.trackId;
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º ID —Ç—Ä–µ–∫–∞ —Å ID, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è
            item.classList.toggle('is-playing', trackId === targetId);
        });
    }
    
    togglePlay() {
        const media = this.getCurrentMedia();
        if (!media) return;
        
        if (this.isPlaying) {
            media.pause();
        } else {
            media.play().catch(err => console.error('‚ùå Play error:', err));
        }
    }
    
    playTrack(index) {
        this.loadTrack(index);
        const media = this.getCurrentMedia();
        if (media) media.play().catch(err => console.error('‚ùå Play error:', err));
    }

    // –î–û–ë–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Ç—Ä–µ–∫–∞ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–ª–∏–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–ª—å–±–æ–º–∞)
    setTrackAndPlay(newTrackData) {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç—Ä–µ–∫ —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏
        const existingIndex = this.queue.findIndex(t => t.id == newTrackData.id);

        if (existingIndex !== -1) {
            // –¢—Ä–µ–∫ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            console.log('üéµ Track found in queue, playing from index:', existingIndex);
            this.playTrack(existingIndex);
            return;
        }

        // 2. –ï—Å–ª–∏ —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –º—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–µ—Å—å –ø–ª–µ–π–ª–∏—Å—Ç
        // —ç—Ç–æ–≥–æ –∞–ª—å–±–æ–º–∞, –µ—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–ª—å–±–æ–º–∞.
        const urlParams = new URLSearchParams(window.location.search);
        const albumId = urlParams.get('id');

        if (albumId) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç, –∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω—É–∂–Ω—ã–π —Ç—Ä–µ–∫
            console.log('üéµ Track not in queue. Re-loading playlist for album ID:', albumId);
            this.loadPlaylist(parseInt(albumId)).then(() => {
                 // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∫–ª–∏–∫–Ω—É—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞ –≤ –Ω–æ–≤–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–µ
                 const loadedIndex = this.queue.findIndex(t => t.id == newTrackData.id);
                 if(loadedIndex !== -1) {
                    this.playTrack(loadedIndex);
                 } else {
                     console.error('‚ùå Clicked track not found in loaded album playlist.');
                 }
            }).catch(e => console.error('‚ùå Error during setTrackAndPlay loadPlaylist:', e));
        } else {
            // 3. –ï—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–ª—å–±–æ–º–∞, –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫.
            console.log('üéµ Not on album page. Replacing current queue with single track.');
            // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–æ—Ä–º–∞—Ç—É track
            const trackForQueue = {
                id: newTrackData.id,
                fullAudioPath: newTrackData.fullAudioPath,
                title: newTrackData.title,
                coverImagePath: newTrackData.coverImagePath,
                albumTitle: newTrackData.albumTitle || 'Single',
            };
            this.queue = [trackForQueue]; // –ó–∞–º–µ–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å
            this.renderQueue();
            this.playTrack(0);
        }
    }
    
    nextTrack() {
        if (this.queue.length === 0) return;
        
        if (this.repeatMode === 'one') {
            this.loadTrack(this.currentIndex);
        } else if (this.isShuffle) {
            this.currentIndex = Math.floor(Math.random() * this.queue.length);
            this.loadTrack(this.currentIndex);
        } else {
            this.currentIndex++;
            if (this.currentIndex >= this.queue.length) {
                this.currentIndex = this.repeatMode === 'all' ? 0 : this.queue.length - 1;
            }
            this.loadTrack(this.currentIndex);
        }
        
        const media = this.getCurrentMedia();
        if (media) media.play().catch(err => console.error('‚ùå Play error:', err));
    }
    
    prevTrack() {
        if (this.queue.length === 0) return;
        
        this.currentIndex--;
        if (this.currentIndex < 0) {
            this.currentIndex = this.queue.length - 1;
        }
        
        this.loadTrack(this.currentIndex);
        const media = this.getCurrentMedia();
        if (media) media.play().catch(err => console.error('‚ùå Play error:', err));
    }
    
    toggleRepeat() {
        const modes = ['none', 'all', 'one'];
        const idx = modes.indexOf(this.repeatMode);
        this.repeatMode = modes[(idx + 1) % modes.length];
        
        const btn = this.container?.querySelector('[data-action="repeat"]');
        if (btn) {
            const icons = { none: 'üîÅ', all: 'üîÅ', one: 'üîÇ' };
            btn.textContent = icons[this.repeatMode];
            btn.classList.toggle('active', this.repeatMode !== 'none');
        }
        
        console.log('üîÑ Repeat:', this.repeatMode);
    }
    
    toggleShuffle() {
        this.isShuffle = !this.isShuffle;
        
        const btn = this.container?.querySelector('[data-action="shuffle"]');
        if (btn) {
            btn.classList.toggle('active', this.isShuffle);
        }
        
        console.log('üîÄ Shuffle:', this.isShuffle ? 'ON' : 'OFF');
    }
    
    switchMode(mode) {
        console.log('üì∫ Switching to:', mode);
        this.currentMode = mode;
        
        const display = this.container?.querySelector('.player-display');
        const queue = this.container?.querySelector('.queue-container');
        const lyrics = this.container?.querySelector('.lyrics-container');
        const video = this.container?.querySelector('video');
        const audio = this.container?.querySelector('audio');
        const cover = this.container?.querySelector('.player-cover');
        
        // –°–∫—Ä—ã—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        if (display) display.style.display = 'none';
        if (queue) queue.style.display = 'none';
        if (lyrics) lyrics.style.display = 'none';
        
        // –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏
        const buttons = this.container?.querySelectorAll('.mode-btn');
        if (buttons) {
            buttons.forEach(btn => {
                btn.classList.toggle('active', btn.dataset.mode === mode);
            });
        }
        
        const track = this.queue[this.currentIndex];
        
        switch(mode) {
            case 'audio':
                if (display) display.style.display = 'block';
                if (cover) cover.style.display = 'block';
                if (video) video.style.display = 'none';
                if (audio) audio.style.display = 'block';
                if (track) this.loadAudio(track);
                break;
                
            case 'video':
                if (display) display.style.display = 'block';
                if (cover) cover.style.display = 'none';
                if (video) video.style.display = 'block';
                if (audio) audio.style.display = 'none';
                
                if (track?.videoPath) {
                    this.loadVideo(track);
                } else {
                    alert('‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞');
                    this.switchMode('audio');
                }
                break;
                
            case 'queue':
                if (queue) queue.style.display = 'block';
                break;
                
            case 'lyrics':
                if (lyrics) lyrics.style.display = 'block';
                break;
        }
    }
    
    seekTo(e) {
        const progressBar = this.container?.querySelector('.progress-bar');
        const media = this.getCurrentMedia();
        
        if (!progressBar || !media || !media.duration) return;
        
        const rect = progressBar.getBoundingClientRect();
        const percent = (e.clientX - rect.left) / rect.width;
        media.currentTime = percent * media.duration;
    }
    
    updateProgress() {
        const media = this.getCurrentMedia();
        if (!media) return;
        
        const percent = media.duration ? (media.currentTime / media.duration) * 100 : 0;
        const fill = this.container?.querySelector('.progress-fill');
        const times = this.container?.querySelectorAll('.time');
        
        if (fill) fill.style.width = percent + '%';
        if (times?.[0]) times[0].textContent = this.formatTime(media.currentTime);
        if (times?.[1]) times[1].textContent = this.formatTime(media.duration);
    }
    
    updateDuration() {
        const media = this.getCurrentMedia();
        if (!media || !media.duration) return;
        
        const duration = Math.floor(media.duration);
        if (this.queue[this.currentIndex]) {
            this.queue[this.currentIndex].duration = duration;
            const item = this.container?.querySelector(
                `.queue-item[data-index="${this.currentIndex}"] .queue-duration`
            );
            if (item) item.textContent = this.formatTime(duration);
        }
    }
    
    updatePlayButton() {
        const btn = this.container?.querySelector('.play-btn');
        if (btn) {
            btn.textContent = this.isPlaying ? '‚è∏' : '‚ñ∂';
        }
    }
    
    onTrackEnded() {
        console.log('‚èπÔ∏è Track ended');
        this.nextTrack();
    }
    
    getCurrentMedia() {
        if (this.currentMode === 'video') {
            return this.container?.querySelector('video');
        }
        return this.container?.querySelector('audio');
    }
    
    normalizePath(path) {
        if (!path) return '';
        // –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
        return path.startsWith('/') ? path : '/' + path;
    }
    
    formatTime(seconds) {
        if (!seconds || isNaN(seconds)) return '0:00';
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins}:${secs.toString().padStart(2, '0')}`;
    }
    
    escapeHtml(text) {
        const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' };
        return String(text || '').replace(/[&<>"']/g, m => map[m]);
    }
}

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
document.addEventListener('DOMContentLoaded', () => {
    if (document.getElementById('epic-player')) {
        window.epicPlayer = new EpicPlayer('epic-player');
        console.log('‚úÖ Epic Player v4.2 Ready!');
    }
    
    // –î–û–ë–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–ª—å–±–æ–º–∞
    document.querySelectorAll('.track-playable').forEach(item => {
        item.addEventListener('click', (event) => {
            // –ò—Å–∫–ª—é—á–∞–µ–º –∫–ª–∏–∫, –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –≤–Ω—É—Ç—Ä–∏
            if (event.target.closest('a')) {
                return;
            }
            
            const trackId = item.dataset.trackId;
            const trackUrl = item.dataset.trackUrl;
            const trackTitle = item.dataset.trackTitle;
            const trackCover = item.dataset.trackCover;
            
            if (trackId && trackUrl && window.epicPlayer) {
                // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –ø–ª–µ–µ—Ä
                const trackData = {
                    id: trackId,
                    fullAudioPath: trackUrl,
                    title: trackTitle,
                    coverImagePath: trackCover,
                    albumTitle: '–¢–µ–∫—É—â–∏–π –∞–ª—å–±–æ–º' 
                };
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–ª–µ–µ—Ä–∞
                window.epicPlayer.setTrackAndPlay(trackData);
            }
        });
    });
});

console.log('‚úÖ Epic Player Video Script Loaded');