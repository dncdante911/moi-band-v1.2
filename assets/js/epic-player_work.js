/**
 * MASTER OF ILLUSION - EPIC PLAYER v4.0 STABLE
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–æ —Å –Ω—É–ª—è - —Ä–∞–±–æ—Ç–∞–µ—Ç!
 */

class EpicPlayer {
    constructor(containerId = 'epic-player') {
        this.container = document.getElementById(containerId);
        if (!this.container) {
            console.error('‚ùå –ü–ª–µ–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', containerId);
            return;
        }
        
        this.queue = [];
        this.currentIndex = 0;
        this.isPlaying = false;
        this.currentMode = 'audio';
        this.repeatMode = 'none';
        this.isShuffle = false;
        
        console.log('üé∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EpicPlayer v4.0...');
        this.init();
    }
    
    init() {
        this.setupEventListeners();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        const urlParams = new URLSearchParams(window.location.search);
        const albumId = urlParams.get('id');
        
        if (albumId) {
            console.log('üìÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–ª—å–±–æ–º ID:', albumId);
            this.loadPlaylist(parseInt(albumId));
        } else {
            console.warn('‚ö†Ô∏è ID –∞–ª—å–±–æ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL');
        }
    }
    
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const playBtn = this.container?.querySelector('.play-btn');
        const prevBtn = this.container?.querySelector('[data-action="prev"]');
        const nextBtn = this.container?.querySelector('[data-action="next"]');
        const repeatBtn = this.container?.querySelector('[data-action="repeat"]');
        const shuffleBtn = this.container?.querySelector('[data-action="shuffle"]');
        
        if (playBtn) playBtn.addEventListener('click', () => this.togglePlay());
        if (prevBtn) prevBtn.addEventListener('click', () => this.prevTrack());
        if (nextBtn) nextBtn.addEventListener('click', () => this.nextTrack());
        if (repeatBtn) repeatBtn.addEventListener('click', () => this.toggleRepeat());
        if (shuffleBtn) shuffleBtn.addEventListener('click', () => this.toggleShuffle());
        
        // –†–µ–∂–∏–º—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        const modeButtons = this.container?.querySelectorAll('.mode-btn');
        modeButtons?.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const mode = e.target.dataset.mode;
                if (mode) this.switchMode(mode);
            });
        });
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        const progressBar = this.container?.querySelector('.progress-bar');
        if (progressBar) {
            progressBar.addEventListener('click', (e) => this.seekTo(e));
        }
        
        // –ú–µ–¥–∏–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
        const audio = this.container?.querySelector('audio');
        const video = this.container?.querySelector('video');
        
        if (audio) {
            audio.addEventListener('timeupdate', () => this.updateProgress());
            audio.addEventListener('ended', () => this.onTrackEnded());
            audio.addEventListener('loadedmetadata', () => this.updateDuration());
            audio.addEventListener('play', () => {
                this.isPlaying = true;
                this.updatePlayButton();
            });
            audio.addEventListener('pause', () => {
                this.isPlaying = false;
                this.updatePlayButton();
            });
        }
        
        if (video) {
            video.addEventListener('timeupdate', () => this.updateProgress());
            video.addEventListener('ended', () => this.onTrackEnded());
            video.addEventListener('loadedmetadata', () => this.updateDuration());
            video.addEventListener('play', () => {
                this.isPlaying = true;
                this.updatePlayButton();
            });
            video.addEventListener('pause', () => {
                this.isPlaying = false;
                this.updatePlayButton();
            });
        }
        
        console.log('‚úÖ Event listeners —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
    async loadPlaylist(albumId) {
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–ª–µ–π–ª–∏—Å—Ç –∞–ª—å–±–æ–º–∞:', albumId);
            
            const url = `/api/player/queue.php?album_id=${albumId}`;
            const response = await fetch(url);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API');
            }
            
            if (!data.tracks || data.tracks.length === 0) {
                console.warn('‚ö†Ô∏è –ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç');
                return;
            }
            
            this.queue = data.tracks;
            this.currentIndex = 0;
            this.isShuffle = false;
            this.repeatMode = 'none';
            
            console.log('‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:', this.queue.length, '—Ç—Ä–µ–∫–æ–≤');
            console.log('üéµ –ü–µ—Ä–≤—ã–π —Ç—Ä–µ–∫:', this.queue[0].title);
            
            this.renderQueue();
            this.loadTrack(0);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞:', error);
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: ' + error.message);
        }
    }
    
    loadTrack(index) {
        if (index < 0 || index >= this.queue.length) {
            console.warn('‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫–∞ –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü:', index);
            return;
        }
        
        this.currentIndex = index;
        const track = this.queue[index];
        
        console.log(`üéµ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫ [${index + 1}/${this.queue.length}]:`, track.title);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        this.updateTrackInfo(track);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if (this.currentMode === 'video' && track.videoPath) {
            console.log('üì∫ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ');
            this.loadVideo(track);
        } else {
            console.log('üîä –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ');
            this.loadAudio(track);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç
        this.loadLyrics(track.id);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
        this.updateQueueHighlight();
    }
    
    loadAudio(track) {
        const audio = this.container?.querySelector('#audio-player');
        if (!audio || !track.fullAudioPath) {
            console.error('‚ùå –ê—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        const audioPath = track.fullAudioPath.startsWith('/') 
            ? track.fullAudioPath 
            : '/' + track.fullAudioPath;
        
        audio.src = audioPath;
        console.log('‚úÖ –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', audioPath);
    }
    
    loadVideo(track) {
        const video = this.container?.querySelector('video');
        
        if (!video) {
            console.error('‚ùå –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        if (!track.videoPath) {
            console.warn('‚ö†Ô∏è –í–∏–¥–µ–æ –¥–ª—è —Ç—Ä–µ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ');
            return;
        }
        
        const videoPath = track.videoPath.startsWith('/') 
            ? track.videoPath 
            : '/' + track.videoPath;
        
        console.log('üìπ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ:', videoPath);
        
        video.src = videoPath;
    }
    
    async loadLyrics(trackId) {
        try {
            const response = await fetch(`/api/player/lyrics.php?track_id=${trackId}`);
            const data = await response.json();
            
            const lyricsText = this.container?.querySelector('.lyrics-text');
            if (!lyricsText) return;
            
            if (data.lyrics && data.lyrics.trim()) {
                lyricsText.textContent = data.lyrics;
            } else {
                lyricsText.innerHTML = '<div class="no-lyrics">üéµ –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</div>';
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞:', e);
        }
    }
    
    updateTrackInfo(track) {
        const title = this.container?.querySelector('.track-title');
        const artist = this.container?.querySelector('.track-artist');
        const album = this.container?.querySelector('.track-album');
        
        if (title) title.textContent = track.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫';
        if (artist) artist.textContent = 'Master of Illusion';
        if (album) album.textContent = track.albumTitle || '–ê–ª—å–±–æ–º';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É
        const cover = this.container?.querySelector('.player-cover img');
        if (cover && track.coverImagePath) {
            const coverPath = track.coverImagePath.startsWith('/') 
                ? track.coverImagePath 
                : '/' + track.coverImagePath;
            cover.src = coverPath;
        }
    }
    
    renderQueue() {
        const queueList = this.container?.querySelector('.queue-list');
        if (!queueList) return;
        
        queueList.innerHTML = this.queue.map((track, index) => `
            <li class="queue-item" data-index="${index}">
                <span class="queue-number">${index + 1}</span>
                <div class="queue-info">
                    <div class="queue-track-name">${this.escapeHtml(track.title)}</div>
                    <div class="queue-track-album">${this.escapeHtml(track.albumTitle || '')}</div>
                </div>
                <span class="queue-duration">${this.formatTime(track.duration || 0)}</span>
            </li>
        `).join('');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—á–µ—Ä–µ–¥–∏
        queueList.querySelectorAll('.queue-item').forEach((item, index) => {
            item.addEventListener('click', () => this.playTrack(index));
        });
        
        console.log('‚úÖ –û—á–µ—Ä–µ–¥—å –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–∞:', this.queue.length, '—Ç—Ä–µ–∫–æ–≤');
    }
    
    updateQueueHighlight() {
        const items = this.container?.querySelectorAll('.queue-item');
        items?.forEach((item, index) => {
            if (index === this.currentIndex) {
                item.classList.add('active');
            } else {
                item.classList.remove('active');
            }
        });
    }
    
    updateDuration() {
        const media = this.getCurrentMedia();
        if (!media || !media.duration) return;
        
        const duration = Math.floor(media.duration);
        if (this.queue[this.currentIndex]) {
            this.queue[this.currentIndex].duration = duration;
            const item = this.container?.querySelector(`.queue-item[data-index="${this.currentIndex}"] .queue-duration`);
            if (item) item.textContent = this.formatTime(duration);
        }
    }
    
    togglePlay() {
        const media = this.getCurrentMedia();
        if (!media) return;
        
        if (this.isPlaying) {
            media.pause();
        } else {
            media.play();
        }
    }
    
    playTrack(index) {
        if (index < 0 || index >= this.queue.length) return;
        this.loadTrack(index);
        const media = this.getCurrentMedia();
        if (media) media.play();
    }
    
    nextTrack() {
        if (this.queue.length === 0) return;
        
        console.log('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ (repeat:', this.repeatMode, 'shuffle:', this.isShuffle + ')');
        
        if (this.repeatMode === 'one') {
            this.loadTrack(this.currentIndex);
        } else if (this.isShuffle) {
            this.currentIndex = Math.floor(Math.random() * this.queue.length);
            this.loadTrack(this.currentIndex);
        } else {
            this.currentIndex++;
            if (this.currentIndex >= this.queue.length) {
                if (this.repeatMode === 'all') {
                    this.currentIndex = 0;
                    this.loadTrack(this.currentIndex);
                } else {
                    this.currentIndex = this.queue.length - 1;
                    this.isPlaying = false;
                    this.updatePlayButton();
                    return;
                }
            } else {
                this.loadTrack(this.currentIndex);
            }
        }
        
        const media = this.getCurrentMedia();
        if (media) media.play();
    }
    
    prevTrack() {
        if (this.queue.length === 0) return;
        
        console.log('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫');
        
        this.currentIndex--;
        if (this.currentIndex < 0) {
            this.currentIndex = this.queue.length - 1;
        }
        
        this.loadTrack(this.currentIndex);
        const media = this.getCurrentMedia();
        if (media) media.play();
    }
    
    toggleRepeat() {
        const modes = ['none', 'all', 'one'];
        const idx = modes.indexOf(this.repeatMode);
        this.repeatMode = modes[(idx + 1) % modes.length];
        
        const btn = this.container?.querySelector('[data-action="repeat"]');
        if (btn) {
            const icons = { none: 'üîÅ', all: 'üîÅ', one: 'üîÇ' };
            const titles = { none: '–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞', all: '–ü–æ–≤—Ç–æ—Ä –≤—Å–µ—Ö', one: '–ü–æ–≤—Ç–æ—Ä –æ–¥–Ω–æ–≥–æ' };
            
            btn.textContent = icons[this.repeatMode];
            btn.title = titles[this.repeatMode];
            btn.classList.toggle('active', this.repeatMode !== 'none');
        }
        
        console.log('üîÑ –ü–æ–≤—Ç–æ—Ä:', this.repeatMode);
    }
    
    toggleShuffle() {
        this.isShuffle = !this.isShuffle;
        
        const btn = this.container?.querySelector('[data-action="shuffle"]');
        if (btn) {
            btn.classList.toggle('active', this.isShuffle);
            btn.title = this.isShuffle ? '–í—ã–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ' : '–í–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ';
        }
        
        console.log('üîÄ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ:', this.isShuffle ? '–í–ö–õ' : '–í–´–ö–õ');
    }
    
    switchMode(mode) {
        console.log('üì∫ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞:', mode);
        this.currentMode = mode;
        
        const display = this.container?.querySelector('.player-display');
        const queue = this.container?.querySelector('.queue-container');
        const lyrics = this.container?.querySelector('.lyrics-container');
        const audio = this.container?.querySelector('audio');
        const video = this.container?.querySelector('video');
        const cover = this.container?.querySelector('.player-cover');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–æ–≤
        const buttons = this.container?.querySelectorAll('.mode-btn');
        buttons?.forEach(btn => {
            btn.classList.toggle('active', btn.dataset.mode === mode);
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        if (queue) queue.style.display = 'none';
        if (lyrics) lyrics.style.display = 'none';
        if (display) display.style.display = 'none';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const track = this.queue[this.currentIndex];
        
        switch(mode) {
            case 'audio':
                if (display) display.style.display = 'block';
                if (cover) cover.style.display = 'block';
                if (video) video.style.display = 'none';
                if (audio) audio.style.display = 'block';
                this.loadAudio(track);
                console.log('üéµ –†–µ–∂–∏–º –ê–£–î–ò–û –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
                break;
                
            case 'video':
                if (display) display.style.display = 'block';
                if (cover) cover.style.display = 'none';
                if (video) video.style.display = 'block';
                if (audio) audio.style.display = 'none';
                
                if (track?.videoPath) {
                    this.loadVideo(track);
                    console.log('üé¨ –†–µ–∂–∏–º –í–ò–î–ï–û –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
                } else {
                    alert('‚ö†Ô∏è –í–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
                    this.switchMode('audio');
                }
                break;
                
            case 'queue':
                if (queue) queue.style.display = 'block';
                console.log('üìã –†–µ–∂–∏–º –û–ß–ï–†–ï–î–¨ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
                break;
                
            case 'lyrics':
                if (lyrics) lyrics.style.display = 'block';
                console.log('üìù –†–µ–∂–∏–º –¢–ï–ö–°–¢ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
                break;
        }
    }
    
    seekTo(e) {
        const progressBar = this.container?.querySelector('.progress-bar');
        const media = this.getCurrentMedia();
        
        if (!progressBar || !media || !media.duration) return;
        
        const rect = progressBar.getBoundingClientRect();
        const percent = (e.clientX - rect.left) / rect.width;
        media.currentTime = percent * media.duration;
    }
    
    updateProgress() {
        const media = this.getCurrentMedia();
        if (!media) return;
        
        const percent = media.duration ? (media.currentTime / media.duration) * 100 : 0;
        const fill = this.container?.querySelector('.progress-fill');
        const handle = this.container?.querySelector('.progress-handle');
        const times = this.container?.querySelectorAll('.time');
        
        if (fill) fill.style.width = percent + '%';
        if (handle) handle.style.left = percent + '%';
        if (times?.[0]) times[0].textContent = this.formatTime(media.currentTime);
        if (times?.[1]) times[1].textContent = this.formatTime(media.duration);
    }
    
    updatePlayButton() {
        const btn = this.container?.querySelector('.play-btn');
        if (btn) {
            btn.textContent = this.isPlaying ? '‚è∏' : '‚ñ∂';
            btn.title = this.isPlaying ? '–ü–∞—É–∑–∞' : '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏';
        }
    }
    
    onTrackEnded() {
        console.log('‚èπÔ∏è –¢—Ä–µ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω');
        this.nextTrack();
    }
    
    getCurrentMedia() {
        if (this.currentMode === 'video') {
            return this.container?.querySelector('video');
        }
        return this.container?.querySelector('audio');
    }
    
    formatTime(seconds) {
        if (!seconds || isNaN(seconds)) return '0:00';
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins}:${secs.toString().padStart(2, '0')}`;
    }
    
    escapeHtml(text) {
        const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' };
        return String(text || '').replace(/[&<>"']/g, m => map[m]);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    if (document.getElementById('epic-player')) {
        window.epicPlayer = new EpicPlayer('epic-player');
        console.log('üé∏ Epic Player v4.0 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    }
});